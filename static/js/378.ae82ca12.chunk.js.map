{"version":3,"file":"static/js/378.ae82ca12.chunk.js","mappings":"wMAEaA,EAAoBC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mFAKtC,SAAAC,GAAK,OACLA,EAAMC,kBACNC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,8LAQF,I,SCPL,EARoB,SAAHK,GAAuC,IAAjCH,EAAeG,EAAfH,gBAAiBI,EAAQD,EAARC,SACtC,OACEC,EAAAA,EAAAA,KAACV,EAAiB,CAACK,gBAAiBA,EAAgBI,SACjDA,GAGP,C,kFCNaE,EAAgBV,EAAAA,GAAAA,QAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sCAGvC,SAAAC,GAAK,OACLA,EAAMQ,YACNN,EAAAA,EAAAA,IAAGC,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,8HAKF,I,SCIL,EAbgB,SAAHK,GAA6C,IAADK,EAAAL,EAAtCM,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EAAED,EAASJ,EAATI,UAAWH,EAAQD,EAARC,SACxC,OACEM,EAAAA,EAAAA,MAACJ,EAAa,CAACC,UAAWA,EAAUH,SAAA,EAClCC,EAAAA,EAAAA,KAAA,MAAAD,SAAKK,IACJL,IAGP,C,uICRaO,EAA8Bf,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gIAQxCc,EAAqBhB,EAAAA,GAAAA,KAAWM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,6I,SC6B7C,EAlCqB,WACnB,IAAMe,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAClBG,GAAWC,EAAAA,EAAAA,MAejB,OACEb,EAAAA,EAAAA,KAACM,EAA2B,CAAAP,UAC1BM,EAAAA,EAAAA,MAACE,EAAkB,CAACO,SAfH,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cACnBN,GACEO,EAAAA,EAAAA,IAAS,CACPC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAGrCL,EAAKQ,OACP,EAIgDC,aAAa,MAAK3B,SAAA,EAC5DC,EAAAA,EAAAA,KAAA,SAAO2B,QAASnB,EAAYT,SAAC,cAC7BC,EAAAA,EAAAA,KAAA,SAAO4B,KAAK,OAAOR,KAAK,OAAOS,GAAIrB,EAAasB,UAAQ,KACxD9B,EAAAA,EAAAA,KAAA,SAAO2B,QAASjB,EAAaX,SAAC,WAC9BC,EAAAA,EAAAA,KAAA,SAAO4B,KAAK,QAAQR,KAAK,QAAQS,GAAInB,EAAcoB,UAAQ,KAC3D9B,EAAAA,EAAAA,KAAA,SAAO2B,QAAShB,EAAgBZ,SAAC,cACjCC,EAAAA,EAAAA,KAAA,SAAO4B,KAAK,WAAWR,KAAK,WAAWS,GAAIlB,EAAiBmB,UAAQ,KACpE9B,EAAAA,EAAAA,KAAA,UAAQ4B,KAAK,SAAQ7B,SAAC,iBAI9B,E,oBChCe,SAASgC,IACtB,OACE1B,EAAAA,EAAAA,MAAA,OAAAN,SAAA,EACEC,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CAAAjC,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,oBAETC,EAAAA,EAAAA,KAACiC,EAAAA,EAAW,CAACtC,gBAAgB,OAAMI,SAAC,cACpCC,EAAAA,EAAAA,KAACkC,EAAAA,EAAO,CAAAnC,UACNC,EAAAA,EAAAA,KAACmC,EAAY,QAIrB,C","sources":["components/MainHeading/styled.js","components/MainHeading/MainHeading.jsx","components/Section/styled.js","components/Section/Section.jsx","components/RegisterForm/styled.js","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled, { css } from 'styled-components';\n\nexport const MainHeadingStyled = styled.h1`\n  font-weight: 500;\n  font-size: 48;\n  text-align: 'center';\n\n  ${props =>\n    props.$visuallyhidden &&\n    css`\n      clip: rect(0 0 0 0);\n      clip-path: inset(50%);\n      height: 1px;\n      overflow: hidden;\n      position: absolute;\n      white-space: nowrap;\n      width: 1px;\n    `}\n`;\n","import { MainHeadingStyled } from './styled';\n\nconst MainHeading = ({ $visuallyhidden, children }) => {\n  return (\n    <MainHeadingStyled $visuallyhidden={$visuallyhidden}>\n      {children}\n    </MainHeadingStyled>\n  );\n};\n\nexport default MainHeading;\n","import styled, { css } from 'styled-components';\n\nexport const SectionStyled = styled.section`\n  margin: 0 50px;\n\n  ${props =>\n    props.$centered &&\n    css`\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n    `}\n`;\n","import PropTypes from 'prop-types';\nimport { SectionStyled } from './styled';\n\nconst Section = ({ title = '', $centered, children }) => {\n  return (\n    <SectionStyled $centered={$centered}>\n      <h2>{title}</h2>\n      {children}\n    </SectionStyled>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import styled from 'styled-components';\n\nexport const RegisterFormContainerStyled = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: calc(100vh - 200px);\n`;\n\nexport const RegisterFormStyled = styled.form`\n  display: inline-flex;\n  flex-direction: column;\n  gap: 10px;\n  margin: 20px 0;\n  padding: 20px;\n  border: solid black 1px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/operations';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { RegisterFormContainerStyled, RegisterFormStyled } from './styled';\n\nconst RegisterForm = () => {\n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <RegisterFormContainerStyled>\n      <RegisterFormStyled onSubmit={handleSubmit} autoComplete=\"off\">\n        <label htmlFor={nameInputId}>Username</label>\n        <input type=\"text\" name=\"name\" id={nameInputId} required />\n        <label htmlFor={emailInputId}>Email</label>\n        <input type=\"email\" name=\"email\" id={emailInputId} required />\n        <label htmlFor={passwordInputId}>Password</label>\n        <input type=\"password\" name=\"password\" id={passwordInputId} required />\n        <button type=\"submit\">Register</button>\n      </RegisterFormStyled>\n    </RegisterFormContainerStyled>\n  );\n};\n\nexport default RegisterForm;\n","import { Helmet } from 'react-helmet';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\nimport Section from 'components/Section/Section';\nimport MainHeading from 'components/MainHeading/MainHeading';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <MainHeading $visuallyhidden=\"true\">Register</MainHeading>\n      <Section>\n        <RegisterForm />\n      </Section>\n    </div>\n  );\n}\n"],"names":["MainHeadingStyled","styled","_templateObject","_taggedTemplateLiteral","props","$visuallyhidden","css","_templateObject2","_ref","children","_jsx","SectionStyled","$centered","_ref$title","title","_jsxs","RegisterFormContainerStyled","RegisterFormStyled","nameInputId","nanoid","emailInputId","passwordInputId","dispatch","useDispatch","onSubmit","event","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","autoComplete","htmlFor","type","id","required","Register","Helmet","MainHeading","Section","RegisterForm"],"sourceRoot":""}