{"version":3,"file":"static/js/435.017ee981.chunk.js","mappings":"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","sources":["components/MainHeading/styled.js","components/MainHeading/MainHeading.jsx","redux/contacts/selectors.js","components/Section/styled.js","components/Section/Section.jsx","components/ColumnDiv/styled.js","components/ColumnDiv/ColumnDiv.jsx","components/ContactForm/styled.js","components/ContactForm/ContactForm.jsx","components/Notification/Notification.jsx","components/Filter/styled.js","components/Filter/Filter.jsx","components/Contact/styled.js","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MainHeadingStyled = styled.h1`\n  font-weight: 500;\n  font-size: 48;\n  text-align: 'center';\n\n  &.visually-hidden {\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n  }\n`;\n","import { MainHeadingStyled } from './styled';\n\nconst MainHeading = ({ children }) => {\n  return <MainHeadingStyled>{children}</MainHeadingStyled>;\n};\n\nexport default MainHeading;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (!filter) return contacts;\n\n    return contacts.filter(contact => {\n      const { name } = contact;\n      return name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n);\n","import styled from 'styled-components';\n\nexport const SectionStyled = styled.section`\n  margin: 0 50px;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionStyled } from './styled';\n\nconst Section = ({ title = '', children }) => {\n  return (\n    <SectionStyled>\n      <h2>{title}</h2>\n      {children}\n    </SectionStyled>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import styled from 'styled-components';\n\nexport const ColumnDivStyled = styled.div`\n  display: flex;\n  gap: 30px;\n`;\n","import { ColumnDivStyled } from './styled';\n\nconst ColumnDiv = ({ children }) => {\n  return <ColumnDivStyled>{children}</ColumnDivStyled>;\n};\n\nexport default ColumnDiv;\n","import styled from 'styled-components';\n\nexport const ContactFormStyled = styled.form`\n  display: inline-flex;\n  flex-direction: column;\n  gap: 10px;\n  margin: 20px 0;\n  padding: 20px;\n  border: solid black 1px;\n`;\n","import { ContactFormStyled } from './styled';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nconst ContactForm = () => {\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const name = event.target.elements.name.value;\n    const number = event.target.elements.number.value;\n    event.target.reset();\n    const nameContacts = contacts.map(contact => contact.name.toLowerCase());\n\n    nameContacts.indexOf(name.toLowerCase()) !== -1\n      ? alert(`${name} is already in contacts.`)\n      : dispatch(\n          addContact({\n            name,\n            number,\n          })\n        );\n  };\n\n  return (\n    <ContactFormStyled onSubmit={handleFormSubmit}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        id={nameInputId}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        autoComplete=\"off\"\n        required\n      />\n      <label htmlFor={numberInputId}>Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        id={numberInputId}\n        pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        autoComplete=\"off\"\n        required\n      />\n      <button type=\"submit\">Add contact</button>\n    </ContactFormStyled>\n  );\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message = '' }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import styled from 'styled-components';\n\nexport const FilterStyled = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { FilterStyled } from './styled';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\n\nconst Filter = () => {\n  const filterInputId = nanoid();\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = event => {\n    const filter = event.target.value;\n    dispatch(changeFilter(filter));\n  };\n\n  return (\n    <FilterStyled>\n      <label htmlFor={filterInputId}>Find contacts by name</label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        id={filterInputId}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Filter field may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={handleFilter}\n        autoComplete=\"off\"\n        value={filter}\n        required\n      />\n    </FilterStyled>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const ContactStyled = styled.div`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n`;\n","import PropTypes from 'prop-types';\nimport { ContactStyled } from './styled';\n\nconst Contact = ({\n  id = '',\n  name = '',\n  number = '',\n  onHandleDeleteContact,\n}) => {\n  const handleDeleteContact = () => {\n    onHandleDeleteContact(id);\n  };\n\n  return (\n    <ContactStyled>\n      <p>\n        {name}: {number}\n      </p>\n      <button type=\"button\" onClick={handleDeleteContact}>\n        Delete\n      </button>\n    </ContactStyled>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onHandleDeleteContact: PropTypes.func,\n};\n\nexport default Contact;\n","import Contact from 'components/Contact/Contact';\nimport Notification from 'components/Notification/Notification';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <>\n      {filteredContacts.length === 0 ? (\n        <Notification message=\"No contacts matching given criteria\"></Notification>\n      ) : (\n        <ul>\n          {filteredContacts.map(contact => {\n            const { id, name, number } = contact;\n\n            return (\n              <li key={id}>\n                <Contact\n                  id={id}\n                  name={name}\n                  number={number}\n                  onHandleDeleteContact={handleDeleteContact}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from '../redux/contacts/selectors';\nimport MainHeading from 'components/MainHeading/MainHeading';\nimport Section from 'components/Section/Section';\nimport ColumnDiv from 'components/ColumnDiv/ColumnDiv';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Notification from 'components/Notification/Notification';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport Loader from 'components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <MainHeading visually-hidden>Your contacts</MainHeading>\n      <Section title=\"Phonebook\">\n        <ColumnDiv>\n          <ContactForm />\n        </ColumnDiv>\n      </Section>\n      <Section title=\"Contacts\">\n        {error && <b>{error}!!!</b>}\n        {!error && (\n          <>\n            {contacts.length === 0 ? (\n              <Notification message=\"No contacts in phonebook\" />\n            ) : (\n              <>\n                <ColumnDiv>\n                  <Filter />\n                  {isLoading && <Loader />}\n                </ColumnDiv>\n                <ContactList />\n              </>\n            )}\n          </>\n        )}{' '}\n      </Section>\n    </>\n  );\n}\n"],"names":["MainHeadingStyled","styled","_templateObject","_taggedTemplateLiteral","_ref","children","_jsx","selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","SectionStyled","_ref$title","title","_jsxs","ColumnDivStyled","ContactFormStyled","nameInputId","nanoid","numberInputId","useSelector","dispatch","useDispatch","onSubmit","event","preventDefault","target","elements","value","number","reset","map","indexOf","alert","concat","addContact","htmlFor","type","id","pattern","autoComplete","required","_ref$message","message","FilterStyled","filterInputId","onChange","changeFilter","ContactStyled","_ref$id","_ref$name","_ref$number","onHandleDeleteContact","onClick","handleDeleteContact","deleteContact","filteredContacts","_Fragment","length","Notification","Contact","Contacts","useEffect","fetchContacts","Helmet","MainHeading","Section","ColumnDiv","ContactForm","Filter","Loader","ContactList"],"sourceRoot":""}