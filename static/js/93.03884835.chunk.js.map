{"version":3,"file":"static/js/93.03884835.chunk.js","mappings":"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","sources":["components/MainHeading/styled.js","components/MainHeading/MainHeading.jsx","components/Section/styled.js","components/Section/Section.jsx","redux/contacts/selectors.js","components/ColumnDiv/styled.js","components/ColumnDiv/ColumnDiv.jsx","components/ContactForm/styled.js","components/ContactForm/ContactForm.jsx","components/Notification/Notification.jsx","components/Filter/styled.js","components/Filter/Filter.jsx","components/Contact/styled.js","components/Contact/Contact.jsx","components/ContactList/styled.js","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled, { css } from 'styled-components';\n\nexport const MainHeadingStyled = styled.h1`\n  font-weight: 500;\n  font-size: 48;\n  text-align: 'center';\n\n  ${props =>\n    props.$visuallyhidden &&\n    css`\n      clip: rect(0 0 0 0);\n      clip-path: inset(50%);\n      height: 1px;\n      overflow: hidden;\n      position: absolute;\n      white-space: nowrap;\n      width: 1px;\n    `}\n`;\n","import { MainHeadingStyled } from './styled';\n\nconst MainHeading = ({ $visuallyhidden, children }) => {\n  return (\n    <MainHeadingStyled $visuallyhidden={$visuallyhidden}>\n      {children}\n    </MainHeadingStyled>\n  );\n};\n\nexport default MainHeading;\n","import styled, { css } from 'styled-components';\n\nexport const SectionStyled = styled.section`\n  margin: 0 50px;\n\n  ${props =>\n    props.$centered &&\n    css`\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n    `}\n`;\n","import PropTypes from 'prop-types';\nimport { SectionStyled } from './styled';\n\nconst Section = ({ title = '', $centered, children }) => {\n  return (\n    <SectionStyled $centered={$centered}>\n      <h2>{title}</h2>\n      {children}\n    </SectionStyled>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (!filter) return contacts;\n\n    return contacts.filter(contact => {\n      const { name } = contact;\n      return name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n);\n","import styled from 'styled-components';\n\nexport const ColumnDivStyled = styled.div`\n  display: flex;\n  gap: 30px;\n  justify-content: center;\n  position: relative;\n`;\n","import { ColumnDivStyled } from './styled';\n\nconst ColumnDiv = ({ children }) => {\n  return <ColumnDivStyled>{children}</ColumnDivStyled>;\n};\n\nexport default ColumnDiv;\n","import styled from 'styled-components';\n\nexport const ContactFormStyled = styled.form`\n  display: inline-flex;\n  flex-direction: column;\n  gap: 10px;\n  margin: 20px 0;\n  padding: 20px;\n  border: solid black 1px;\n`;\n","import { ContactFormStyled } from './styled';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nconst ContactForm = () => {\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const name = event.target.elements.name.value;\n    const number = event.target.elements.number.value;\n    event.target.reset();\n    const nameContacts = contacts.map(contact => contact.name.toLowerCase());\n\n    nameContacts.indexOf(name.toLowerCase()) !== -1\n      ? alert(`${name} is already in contacts.`)\n      : dispatch(\n          addContact({\n            name,\n            number,\n          })\n        );\n  };\n\n  return (\n    <ContactFormStyled onSubmit={handleFormSubmit}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        id={nameInputId}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        autoComplete=\"off\"\n        required\n      />\n      <label htmlFor={numberInputId}>Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        id={numberInputId}\n        pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        autoComplete=\"off\"\n        required\n      />\n      <button type=\"submit\">Add contact</button>\n    </ContactFormStyled>\n  );\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message = '' }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import styled from 'styled-components';\n\nexport const FilterStyled = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { FilterStyled } from './styled';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/filterSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\n\nconst Filter = () => {\n  const filterInputId = nanoid();\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = event => {\n    const filter = event.target.value;\n    dispatch(changeFilter(filter));\n  };\n\n  return (\n    <FilterStyled>\n      <label htmlFor={filterInputId}>Find contacts by name</label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        id={filterInputId}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Filter field may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={handleFilter}\n        autoComplete=\"off\"\n        value={filter}\n        required\n      />\n    </FilterStyled>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const StyledTd = styled.td`\n  color: #999;\n  border: 1px solid #eee;\n  padding: 12px 35px;\n  border-collapse: collapse;\n  text-align: center;\n`;\n\nexport const ButtonStyled = styled.button`\n  display: inline-block;\n  width: 100px;\n  height: 30px;\n  border-radius: 10px;\n  border: 1px solid #03045e;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.5s ease-in;\n  z-index: 1;\n  position: absolute;\n  top: 50%;\n  right: -100px;\n  transform: translate(0, -50%);\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    width: 0;\n    height: 100%;\n    transform: skew(15deg);\n    transition: all 0.5s;\n    overflow: hidden;\n    z-index: -1;\n  }\n\n  &::before {\n    left: -10px;\n    background: #880808;\n  }\n\n  &::after {\n    left: -10px;\n    background: #ff474d;\n  }\n\n  &:hover::before,\n  &:hover::after {\n    width: 58%;\n  }\n\n  &:hover span {\n    color: #bf0000;\n    transition: 0.3s;\n  }\n\n  span {\n    color: #03045e;\n    font-size: 18px;\n    transition: all 0.3s ease-in;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ButtonStyled, StyledTd } from './styled';\n\nconst Contact = ({\n  id = '',\n  name = '',\n  number = '',\n  onHandleDeleteContact,\n}) => {\n  const handleDeleteContact = () => {\n    onHandleDeleteContact(id);\n  };\n\n  return (\n    <>\n      <StyledTd>{name}</StyledTd>\n      <StyledTd>{number}</StyledTd>\n      <ButtonStyled type=\"button\" onClick={handleDeleteContact}>\n        <span>Delete</span>\n      </ButtonStyled>\n    </>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onHandleDeleteContact: PropTypes.func,\n};\n\nexport default Contact;\n","import styled from 'styled-components';\n\nexport const TableContainer = styled.div`\n  margin: 30px 0;\n  display: flex;\n  justify-content: center;\n`;\n\nexport const StyledTh = styled.th`\n  background-color: #00cccc;\n  color: white;\n  text-transform: uppercase;\n  padding: 12px 35px;\n`;\n\nexport const StyledTr = styled.tr`\n  position: relative;\n`;\n","import Contact from 'components/Contact/Contact';\nimport Notification from 'components/Notification/Notification';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { StyledTh, StyledTr, TableContainer } from './styled';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <>\n      {filteredContacts.length === 0 ? (\n        <Notification message=\"No contacts matching given criteria\"></Notification>\n      ) : (\n        <ul>\n          <TableContainer>\n            <table>\n              <thead>\n                <tr>\n                  <StyledTh>Name</StyledTh>\n                  <StyledTh>Phone</StyledTh>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredContacts.map(contact => {\n                  const { id, name, number } = contact;\n\n                  return (\n                    <>\n                      <StyledTr key={id}>\n                        <Contact\n                          id={id}\n                          name={name}\n                          number={number}\n                          onHandleDeleteContact={handleDeleteContact}\n                        />\n                      </StyledTr>\n                    </>\n                  );\n                })}\n              </tbody>\n            </table>\n          </TableContainer>\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from '../redux/contacts/selectors';\nimport MainHeading from 'components/MainHeading/MainHeading';\nimport Section from 'components/Section/Section';\nimport ColumnDiv from 'components/ColumnDiv/ColumnDiv';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Notification from 'components/Notification/Notification';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport Loader from 'components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <MainHeading $visuallyhidden=\"true\">Your contacts</MainHeading>\n      <Section title=\"Phonebook\" $centered=\"true\">\n        <ColumnDiv>\n          <ContactForm />\n        </ColumnDiv>\n      </Section>\n      <Section title=\"Contacts\" $centered=\"true\">\n        {error && <b>{error}!!!</b>}\n        {!error && (\n          <>\n            {contacts.length === 0 ? (\n              <Notification message=\"No contacts in phonebook\" />\n            ) : (\n              <>\n                <ColumnDiv>\n                  <Filter />\n                  {isLoading && <Loader $absolute=\"true\" />}\n                </ColumnDiv>\n                <ContactList />\n              </>\n            )}\n          </>\n        )}{' '}\n      </Section>\n    </>\n  );\n}\n"],"names":["MainHeadingStyled","styled","_templateObject","_taggedTemplateLiteral","props","$visuallyhidden","css","_templateObject2","_ref","children","_jsx","SectionStyled","$centered","_ref$title","title","_jsxs","selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","ColumnDivStyled","ContactFormStyled","nameInputId","nanoid","numberInputId","useSelector","dispatch","useDispatch","onSubmit","event","preventDefault","target","elements","value","number","reset","map","indexOf","alert","concat","addContact","htmlFor","type","id","pattern","autoComplete","required","_ref$message","message","FilterStyled","filterInputId","onChange","changeFilter","StyledTd","ButtonStyled","_ref$id","_ref$name","_ref$number","onHandleDeleteContact","_Fragment","onClick","TableContainer","StyledTh","StyledTr","_templateObject3","handleDeleteContact","deleteContact","filteredContacts","length","Notification","Contact","Contacts","useEffect","fetchContacts","Helmet","MainHeading","Section","ColumnDiv","ContactForm","Filter","Loader","$absolute","ContactList"],"sourceRoot":""}